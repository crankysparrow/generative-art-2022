{"mappings":"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","sources":["src/scripts/projects/11.js"],"sourcesContent":["let palette = ['#0d5c63', '#fc60a8', '#ff8c42', '#93032e', '#4CB5AE']\nlet directionToDuplicateColor = 0\nlet vectors = []\nlet vx1, vx2, vy1, vy2\n\nlet possibles = [\n\t{ vx1: 0.031, vx2: 0.042, vy1: 0.0978, vy2: 0.58 },\n\t{ vx1: 0.0529, vx2: 0.044986, vy1: 0.0686, vy2: 1.121 },\n\t{ vx1: 0.038, vx2: 0.07, vy1: 0.021, vy2: 1.44 },\n\t{ vx1: 0.08, vx2: 0.02, vy1: 0.05, vy2: 1.24 },\n\t{ vx1: 0.58, vx2: 0.01, vy1: 0.015, vy2: 1.2 },\n\t{ vx1: 0.654, vx2: 0.043, vy1: -0.077, vy2: 0.552 },\n\t{ vx1: 0.75, vx2: -0.015, vy1: 0.018, vy2: -0.535 },\n\t{ vx1: 0.22, vx2: 0.0164, vy1: -0.014, vy2: -1.337 },\n]\n\nlet minLength = 200\nlet idealLength = 700\nlet meetThreshold = 3\nlet circlePackRadius = 50\nlet circlePackingAttempts = 20\nlet lineThickness = 10\nlet timesAdded = 0\nlet alphaVal = 230\n\nfunction makeVectorCurves(startAt = 0) {\n\tconsole.log('starting make curves function')\n\tlet longest = 0\n\tlet shortest = idealLength + 1\n\n\tfor (let i = startAt; i < vectors.length; i++) {\n\t\tlet count = 0\n\t\twhile (count < idealLength) {\n\t\t\tif (vectors[i].done) {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tlet newPoint = vectors[i].addPoint()\n\t\t\tlet intersects = false\n\n\t\t\tfor (let j = 0; j < vectors.length; j++) {\n\t\t\t\tif (i == j) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfor (let pi = 0; pi < vectors[j].points.length; pi++) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(abs(floor(newPoint.x) - floor(vectors[j].points[pi].x)) < meetThreshold &&\n\t\t\t\t\t\t\tabs(floor(newPoint.y) - floor(vectors[j].points[pi].y)) <\n\t\t\t\t\t\t\t\tmeetThreshold) ||\n\t\t\t\t\t\tnewPoint.x > width - lineThickness / 2 ||\n\t\t\t\t\t\tnewPoint.x < 0 ||\n\t\t\t\t\t\tnewPoint.y > height - lineThickness / 2 ||\n\t\t\t\t\t\tnewPoint.y < 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tintersects = true\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (intersects) {\n\t\t\t\tvectors[i].done = true\n\t\t\t} else {\n\t\t\t\tvectors[i].points.push(newPoint)\n\t\t\t}\n\t\t\tcount++\n\t\t}\n\t}\n\n\tvectors = vectors.filter((v, i) => {\n\t\tif (i < startAt) {\n\t\t\treturn true\n\t\t} else {\n\t\t\tlet len = v.points.length\n\t\t\tif (len < minLength) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tif (len > longest) {\n\t\t\t\tlongest = len\n\t\t\t} else if (len < shortest) {\n\t\t\t\tshortest = len\n\t\t\t}\n\t\t}\n\n\t\treturn true\n\t})\n\n\tconsole.log(vectors)\n\tconsole.log(\n\t\t`started at ${startAt}, finished with ${vectors.length} curvy particles.\n\t\tThe longest is ${longest}. The shortest is ${shortest}`\n\t)\n}\n\nfunction drawSomeStuff() {\n\ttimesAdded++\n\n\tnoFill()\n\tstrokeCap(SQUARE)\n\tstrokeWeight(lineThickness)\n\tstroke(100, 10, 250)\n\n\tlet startAt = vectors.length\n\n\tlet ps = particlesCirclePack(circlePackRadius, circlePackingAttempts * timesAdded)\n\tps.forEach((p) => {\n\t\tvectors.push(new Particle(p.x, p.y))\n\t})\n\n\tmakeVectorCurves(startAt)\n\n\tfor (let i = startAt; i < vectors.length; i++) {\n\t\tlet len = vectors[i].points.length\n\t\tbeginShape()\n\t\tlet c = color(palette[vectors[i].col])\n\t\tc.setAlpha(alphaVal)\n\t\tstroke(c)\n\n\t\tcurveVertex(vectors[i].points[0].x, vectors[i].points[0].y)\n\t\tvectors[i].points.forEach((p) => {\n\t\t\tcurveVertex(p.x, p.y)\n\t\t})\n\t\tcurveVertex(vectors[i].points[len - 1].x, vectors[i].points[len - 1].y)\n\n\t\tendShape()\n\t}\n}\n\nfunction findForceX(x, y) {\n\t// return (sin(x * vx1) + sin(y * vx2)) * -5\n\t// return sin(x * vx1) - cos(y * vx2)\n\t// return sin(x * (1 / (width * vx1))) - cos(y * vx2)\n\treturn sin(x * (1 / (width * vx1))) + cos(y * vx2)\n}\n\nfunction findForceY(x, y) {\n\t// return sin((x + y) * vy1) * -5\n\treturn cos(y * (1 / (height * vy2))) + sin(x * vy1)\n}\n\nclass Particle {\n\tconstructor(x, y) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.done = false\n\t\tthis.nPoints = 0\n\t\tthis.points = [createVector(this.x, this.y)]\n\t\tthis.col = false\n\t}\n\n\taddPoint() {\n\t\tlet prev = this.points[this.points.length - 1]\n\n\t\tlet forceX = findForceX(prev.x, prev.y)\n\t\tlet forceY = findForceY(prev.x, prev.y)\n\n\t\tif (!this.col) {\n\t\t\tthis.col = getColor(forceX, forceY)\n\t\t}\n\n\t\tif (forceX < 1 && forceY < 1) {\n\t\t\treturn createVector(prev.x + forceX * 2, prev.y + forceY * 2)\n\t\t} else if (forceX < 0.8 && forceY < 0.8) {\n\t\t\treturn createVector(prev.x + forceX * 1.2, prev.y + forceY * 1.2)\n\t\t} else {\n\t\t\treturn createVector(prev.x + forceX, prev.y + forceY)\n\t\t}\n\t}\n\n\tupdate() {\n\t\tif (this.done) {\n\t\t\treturn\n\t\t}\n\t\tlet prevX = this.x\n\t\tlet prevY = this.y\n\n\t\tlet x = this.x\n\t\tlet y = this.y\n\n\t\tlet forceX = (sin(x * 0.04) + sin(y * 0.03)) * -3\n\t\tlet forceY = sin((x + y) * 0.02) * -3\n\n\t\tthis.x += forceX\n\t\tthis.y += forceY\n\n\t\tthis.checkPixels(prevX, prevY)\n\t}\n\n\tcheckPixels(prevX, prevY) {\n\t\tstroke(0, 100, 150)\n\t\tstrokeWeight(5)\n\n\t\tif (floor(this.x) == floor(prevX) || floor(this.y) == floor.prevY) {\n\t\t\tthis.nPoints++\n\t\t\tline(prevX, prevY, this.x, this.y)\n\t\t} else {\n\t\t\tlet pixel = get(floor(this.x), floor(this.y))\n\t\t\tif (pixel[3] > 100) {\n\t\t\t\tthis.findNewPos()\n\t\t\t\tthis.nPoints = 0\n\t\t\t} else {\n\t\t\t\tthis.nPoints++\n\t\t\t\tline(prevX, prevY, this.x, this.y)\n\t\t\t}\n\t\t}\n\t}\n\n\tfindNewPos() {\n\t\tlet found = false\n\t\tlet i = 0\n\t\tlet x = random(width)\n\t\tlet y = random(height)\n\n\t\twhile (!found && i < 100) {\n\t\t\tlet pix = get(x, y)\n\t\t\tif (pix[3] < 100) {\n\t\t\t\tfound = true\n\t\t\t} else {\n\t\t\t\ti++\n\t\t\t\tx = random(width)\n\t\t\t\ty = random(height)\n\t\t\t}\n\t\t}\n\n\t\tif (found) {\n\t\t\tthis.x = x\n\t\t\tthis.y = y\n\t\t} else {\n\t\t\tthis.done = true\n\t\t}\n\t}\n}\n\nfunction particlesRandom(n) {\n\tfor (let i = 0; i < n; i++) {\n\t\tvectors.push(new Particle(random(width), random(height)))\n\t}\n}\n\nfunction particlesX(n) {\n\tfor (let x = 0; x < n; x++) {\n\t\tvectors.push(new Particle((width / n) * x, (height / n) * x))\n\t\tvectors.push(new Particle((width / n) * x, height - (height / n) * x))\n\t}\n}\n\nfunction particlesGrid(n) {\n\tfor (let x = 0; x < n; x++) {\n\t\tfor (let y = 0; y < n; y++) {\n\t\t\tvectors.push(new Particle((width / n) * x, (height / n) * y))\n\t\t}\n\t}\n}\n\nfunction particlesCirclePack(r, maxAttempts = 100) {\n\tconsole.log('starting circle pack function')\n\tlet points = []\n\tlet keepGoing = true\n\tlet attempts = 0\n\tlet c = 0\n\n\twhile (keepGoing) {\n\t\tc++\n\t\tlet newPoint = createVector(random(r / 2, width - r / 2), random(r / 2, height - r / 2))\n\t\tlet validPoint = true\n\n\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\tif (newPoint.dist(points[i]) < r) {\n\t\t\t\tvalidPoint = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif (validPoint) {\n\t\t\tpoints.push(newPoint)\n\t\t\tattempts = 0\n\t\t} else {\n\t\t\tattempts++\n\t\t}\n\n\t\tif (attempts > maxAttempts) {\n\t\t\tkeepGoing = false\n\t\t}\n\t}\n\n\tconsole.log(`took ${c} attempts to make ${points.length} points`)\n\treturn points\n}\n\nfunction getColor(forceX, forceY) {\n\tif (directionToDuplicateColor == 1) {\n\t\t// toward top2: y down, either x\n\t\tif (forceX < 0 && forceY > 0) {\n\t\t\treturn 1\n\t\t} else if (forceX > 0 && forceY > 0) {\n\t\t\treturn 2\n\t\t} else {\n\t\t\treturn 3\n\t\t}\n\t} else if (directionToDuplicateColor == 2) {\n\t\t// toward bottom2: y up, either x\n\t\tif (forceX < 0 && forceY < 0) {\n\t\t\treturn 1\n\t\t} else if (forceX > 0 && forceY < 0) {\n\t\t\treturn 2\n\t\t} else {\n\t\t\treturn 3\n\t\t}\n\t} else if (directionToDuplicateColor == 3) {\n\t\t// topright corner, botleft corner: y down & x up // yup & x down\n\t\tif (forceX < 0 && forceY > 0) {\n\t\t\treturn 1\n\t\t} else if (forceX > 0 && forceY < 0) {\n\t\t\treturn 2\n\t\t} else {\n\t\t\treturn 3\n\t\t}\n\t} else if (directionToDuplicateColor == 4) {\n\t\t// topleft, botright: y down & x down, y up & x up\n\t\tif (forceX > 0 && forceY > 0) {\n\t\t\treturn 1\n\t\t} else if (forceX < 0 && forceY < 0) {\n\t\t\treturn 2\n\t\t} else {\n\t\t\treturn 3\n\t\t}\n\t} else if (directionToDuplicateColor == 5) {\n\t\t// toward right2: x up, y either\n\t\tif (forceX < 0 && forceY > 0) {\n\t\t\treturn 1\n\t\t} else if (forceX < 0 && forceY < 0) {\n\t\t\treturn 2\n\t\t} else {\n\t\t\treturn 3\n\t\t}\n\t} else if (directionToDuplicateColor == 6) {\n\t\tif (forceX > 0 && forceY > 0) {\n\t\t\treturn 1\n\t\t} else if (forceX > 0 && forceY < 0) {\n\t\t\treturn 2\n\t\t} else {\n\t\t\treturn 3\n\t\t}\n\t} else {\n\t\tif (forceX > 0 && forceY > 0) {\n\t\t\treturn 1\n\t\t} else if (forceX > 0 && forceY < 0) {\n\t\t\treturn 2\n\t\t} else if (forceX < 0 && forceY > 0) {\n\t\t\treturn 3\n\t\t} else if (forceX < 0 && forceY > 0) {\n\t\t\treturn 4\n\t\t}\n\t}\n}\n\nfunction findVertex(type, x, y, z) {\n\tif (type == 'noise2d') {\n\t\tlet angle = noise(x, y) * TWO_PI\n\t\tlet v = p5.Vector.fromAngle(angle)\n\t\treturn v\n\t} else if (type == 'noise3d') {\n\t\tlet angle = noise(x, y, z) * TWO_PI\n\t\treturn p5.Vector.fromAngle(angle)\n\t} else if (type == 'curve') {\n\t\tlet vx = sin(x)\n\t\tlet vy = cos(y)\n\t\treturn createVector(vx, vy)\n\t}\n}\n\nfunction setup() {\n\tcreateCanvas(window.innerWidth, window.innerHeight)\n\t// background('#faf1f8')\n\n\tlet bgs = [color(255, 255, 250, 150), color(236, 222, 212, 150), color(252, 244, 237, 150)]\n\tstrokeWeight(200)\n\tfor (let i = 0; i < 5; i++) {\n\t\tstroke(random(bgs))\n\t\tline(0 - random(width), 0 - random(height), width + random(width), height + random(height))\n\t\tline(width + random(width), height + random(height), 0 - random(width), 0 - random(height))\n\t\tline(0 - random(width), height + random(height), width + random(width), 0 - random(height))\n\t\tline(width + random(width), 0 - random(height), 0 - random(width), height + random(height))\n\t}\n\tpalette = shuffle(palette)\n\tdirectionToDuplicateColor = random([1, 2, 3, 4, 5, 6, 7])\n\n\tvx1 = random(0.1, 1.2)\n\tvx2 = random(0.01, 0.08)\n\tvy1 = random(0.01, 0.08)\n\tvy2 = random(0.5, 1.5)\n\t// ;({ vx1, vx2, vy1, vy2 } = possibles[6])\n\n\tconsole.log({ vx1, vx2, vy1, vy2 })\n\tlet btn = createButton('add curves')\n\tbtn.mousePressed(drawSomeStuff)\n\n\tnoLoop()\n}\n\nfunction draw() {\n\tdrawSomeStuff()\n}\n\nwindow.setup = setup\nwindow.draw = draw\n"],"names":["$878f94b2c53a6ca7$var$vx1","$878f94b2c53a6ca7$var$vx2","$878f94b2c53a6ca7$var$vy1","$878f94b2c53a6ca7$var$vy2","$878f94b2c53a6ca7$var$palette","$878f94b2c53a6ca7$var$directionToDuplicateColor","$878f94b2c53a6ca7$var$vectors","$878f94b2c53a6ca7$var$minLength","$878f94b2c53a6ca7$var$idealLength","$878f94b2c53a6ca7$var$meetThreshold","$878f94b2c53a6ca7$var$circlePackRadius","$878f94b2c53a6ca7$var$circlePackingAttempts","$878f94b2c53a6ca7$var$lineThickness","$878f94b2c53a6ca7$var$timesAdded","$878f94b2c53a6ca7$var$alphaVal","$878f94b2c53a6ca7$var$drawSomeStuff","noFill","strokeCap","SQUARE","strokeWeight","stroke","startAt","length","r","maxAttempts","console","log","points","keepGoing","attempts","c","newPoint","createVector","random","width","height","validPoint","i","dist","push","$878f94b2c53a6ca7$var$particlesCirclePack","forEach","p","$878f94b2c53a6ca7$var$Particle","x","y","longest","shortest","count","done","addPoint","intersects","j","pi","abs","floor","filter","v","len","$878f94b2c53a6ca7$var$makeVectorCurves","beginShape","color","col","setAlpha","curveVertex","endShape","constructor","this","nPoints","prev","forceX","sin","cos","forceY","$878f94b2c53a6ca7$var$findForceY","$878f94b2c53a6ca7$var$getColor","update","prevX","prevY","checkPixels","line","get","findNewPos","found","window","setup","createCanvas","innerWidth","innerHeight","bgs","shuffle","createButton","mousePressed","noLoop","draw"],"version":3,"file":"11.js.map"}