{"mappings":"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","sources":["src/scripts/projects/13.js"],"sourcesContent":["let cblue = '#2d7dd2'\n// let cred = '#ff1053'\nlet csea = '#36f1cd'\nlet cgr = '#e4ff1a'\nlet cdr = '#090c9b'\n\nlet points\n\nfunction setup() {\n\tcreateCanvas(500, 500)\n\tcreateLoop({ duration: 3, gif: true })\n}\n\nfunction draw() {\n\tbackground(0)\n\n\ttranslate(50, 50)\n\tpoints = dots(10, { w: 400, h: 400, dotColor: 'rgba(255,255,255,0.2)' })\n\n\ttheShapes(points)\n}\n\nfunction testing(points) {\n\tsquares(points)\n\n\tpush()\n\ttranslate(400, 0)\n\tscale(-1, 1)\n\tsquares(points)\n\tpop()\n\n\tpush()\n\ttranslate(0, 400)\n\tscale(1, -1)\n\tsquares(points)\n\tpop()\n\n\tpush()\n\ttranslate(400, 400)\n\tscale(-1, -1)\n\tsquares(points)\n\tpop()\n\tfunction squares() {\n\t\tfill('#f0f')\n\t\trect(points[1][1].x, points[1][1].y, 40, 40)\n\t\tfill('#0ff')\n\t\trect(points[2][2].x, points[2][2].y, 40, 40)\n\t\tfill('#ff0')\n\t\trect(points[3][3].x, points[3][3].y, 40, 40)\n\t}\n}\n\nfunction theShapes(points) {\n\tdarkerLines(points, PI / 2)\n\tdrawSquares(points)\n\n\tpush()\n\ttranslate(400, 0)\n\tscale(-1, 1)\n\tdarkerLines(points)\n\tdrawSquares(points)\n\tpop()\n\n\tpush()\n\ttranslate(0, 400)\n\tscale(1, -1)\n\tdarkerLines(points)\n\tdrawSquares(points)\n\tpop()\n\n\tpush()\n\ttranslate(400, 400)\n\tscale(-1, -1)\n\tdarkerLines(points, PI / 2)\n\tdrawSquares(points)\n\tpop()\n\n\tmiddleLines()\n\n\tstroke(cblue)\n\tfor (let ix = 1; ix < points.length; ix += 2) {\n\t\tfor (let iy = 0; iy < points.length; iy += 2) {\n\t\t\tlet p = ix / points.length\n\t\t\tlet d = max(4 - dist(5, 5, ix, iy), 0)\n\t\t\tcircleGrow(ix, iy, d * 10, p + PI / 2)\n\t\t}\n\t}\n}\n\nfunction middleLines() {\n\tstroke(cdr)\n\tsimpleLinePts(3, 5, 6, 5)\n\tsimpleLinePts(7, 5, 4, 5, PI)\n\n\tsimpleLinePts(5, 3, 5, 6)\n\tsimpleLinePts(5, 7, 5, 4, PI)\n\n\tsimpleLinePts(5, 3, 3, 3)\n\tsimpleLinePts(5, 3, 7, 3, PI)\n\n\tsimpleLinePts(5, 7, 3, 7, PI)\n\tsimpleLinePts(5, 7, 7, 7)\n\n\tsimpleLinePts(3, 5, 3, 3)\n\tsimpleLinePts(3, 5, 3, 7, PI)\n\n\tsimpleLinePts(7, 5, 7, 3, PI)\n\tsimpleLinePts(7, 5, 7, 7)\n}\n\nfunction simpleLinePts(ax, ay, bx, by, plus = 0) {\n\tlet a = points[ax][ay]\n\tlet b = points[bx][by]\n\n\tlet p = sin(animLoop.theta + plus) * 1\n\n\tlet pbx = map(p, -1, 1, a.x, b.x)\n\tlet x = a.x > b.x ? constrain(pbx, b.x, a.x) : constrain(pbx, a.x, b.x)\n\tlet pby = map(p, -1, 1, a.y, b.y)\n\tlet y = a.y > b.y ? constrain(pby, b.y, a.y) : constrain(pby, a.y, b.y)\n\tline(a.x, a.y, x, y)\n}\n\nfunction darkerLines(points, plus = 0) {\n\tstroke(cdr)\n\n\tlineP(3, 0, 1, 2, 0, 3, 2, 1)\n\tlineP(2, 2, 0, 4, 4, 0, 0, 4)\n\tlineP(0, 5, 4, 1, 5, 0, 1, 4)\n\tlineP(3, 3, 6, 0, 0, 6, 6, 0)\n\n\tfunction lineP(ax, ay, bx, by, a2x, a2y, b2x, b2y) {\n\t\tlet p = sin(animLoop.theta + plus)\n\n\t\tlet a = points[ax][ay]\n\t\tlet a2 = points[a2x][a2y]\n\n\t\tlet point1 = p5.Vector.lerp(a, a2, map(p, -1, 1, 0, 1))\n\n\t\tlet b = points[bx][by]\n\t\tlet b2 = points[b2x][b2y]\n\t\tlet point2 = p5.Vector.lerp(b, b2, map(p, -1, 1, 0, 1))\n\n\t\tlet p2 = cos(animLoop.theta)\n\t\tlet x2 = map(p2, -1, 1, point1.x, point2.x)\n\t\tlet y2 = map(p2, -1, 1, point1.y, point2.y)\n\n\t\tline(point1.x, point1.y, x2, y2)\n\t\tline(point1.y, point1.x, y2, x2)\n\t}\n}\n\nfunction drawSquares(points) {\n\tstrokeWeight(2)\n\n\tstroke(cblue)\n\tlinePts(1, 1, 1, 3, PI / 4)\n\tlinePts(1, 1, 3, 1, PI / 4)\n\n\tlinePts(3, 3, 3, 1, PI / 4)\n\tlinePts(3, 3, 1, 3, PI / 4)\n\n\tstroke(csea)\n\tlinePts(2, 2, 4, 2)\n\tlinePts(2, 2, 2, 4)\n\n\tlinePts(4, 4, 4, 2)\n\tlinePts(4, 4, 2, 4)\n\n\tfunction linePts(ax, ay, bx, by, plus = 0) {\n\t\tlet a = points[ax][ay]\n\t\tlet b = points[bx][by]\n\n\t\tlet p = sin(animLoop.theta + plus)\n\t\tlet px = sin(animLoop.theta + plus + 0.5)\n\n\t\tlet pbx\n\t\tif (a.x < b.x) {\n\t\t\tpbx = min(map(px, -1, 0.5, a.x, b.x), b.x)\n\t\t} else {\n\t\t\tpbx = max(map(px, -1, 0.5, a.x, b.x), b.x)\n\t\t}\n\t\tlet pby = map(p, -1, 1, a.y, b.y)\n\t\tline(a.x, a.y, pbx, pby)\n\t}\n}\n\nfunction circleGrow(x, y, r, plus = 0) {\n\tlet p = cos(animLoop.theta + plus)\n\tlet pr = map(p, -1, 1, 0, r)\n\n\tcircle(points[x][y].x, points[x][y].y, pr)\n}\n\nfunction dots(\n\tsteps,\n\t{ dotColor = '#fff', radius = 5, offset = false, w = width, h = height } = {}\n) {\n\tfill(dotColor)\n\tnoStroke()\n\n\tlet stepSize = w / steps\n\tlet stepSizeY = h / steps\n\n\tlet pointsArr = []\n\n\tfor (let xi = 0; xi <= steps; xi++) {\n\t\tlet pointsRow = []\n\t\tfor (let yi = 0; yi <= steps; yi++) {\n\t\t\tlet x = xi * stepSize\n\t\t\tlet y = yi * stepSizeY\n\t\t\tif (offset) {\n\t\t\t\tx += yi % 2 == 0 ? stepSize / 2 : 0\n\t\t\t}\n\n\t\t\tpointsRow.push(createVector(x, y))\n\t\t\t// circle(x, y, radius)\n\t\t}\n\n\t\tpointsArr.push(pointsRow)\n\t}\n\tnoFill()\n\n\treturn pointsArr\n}\n\nwindow.setup = setup\nwindow.draw = draw\n"],"names":["$f546357201505b05$var$points","$f546357201505b05$var$cblue","$f546357201505b05$var$csea","$f546357201505b05$var$cdr","$f546357201505b05$var$simpleLinePts","ax","ay","bx","by","plus","a","b","p","sin","animLoop","theta","pbx","map","x","constrain","pby","y","line","$f546357201505b05$var$darkerLines","points","lineP","a2x","a2y","b2x","b2y","a2","point1","p5","Vector","lerp","b2","point2","p2","cos","x2","y2","stroke","$f546357201505b05$var$drawSquares","linePts","px","min","max","strokeWeight","PI","$f546357201505b05$var$circleGrow","r","pr","circle","window","setup","createCanvas","createLoop","duration","gif","draw","background","translate","steps","dotColor","radius","offset","w","width","h","height","fill","noStroke","stepSize","stepSizeY","pointsArr","xi","pointsRow","yi","push","createVector","noFill","$f546357201505b05$var$dots","scale","pop","ix","length","iy","dist","$f546357201505b05$var$theShapes"],"version":3,"file":"13.js.map"}