{"mappings":"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","sources":["src/scripts/projects/12-loopsquares.js"],"sourcesContent":["let angleSize\nlet points = []\nlet colf = { h: 215, s: 100, b: 70 }\nlet colb = { h: 225, s: 50, b: 30 }\nlet cols = { h: 180, s: 90, b: 100 }\n\nfunction setup() {\n\tcreateCanvas(500, 500)\n\tangleMode(RADIANS)\n\tcolorMode(HSB)\n\tangleSize = TWO_PI / 6\n\tgetPoints()\n\tcreateLoop({ duration: 5 })\n}\n\nfunction draw() {\n\tbackground(0)\n\tone()\n}\n\nfunction one() {\n\thexPattern(250, 250, 100, animLoop.progress)\n}\n\nfunction two() {\n\tlet steps = 2\n\tlet yStep = height / steps\n\tlet radius = yStep * 0.5\n\tlet xStep = sqrt(sq(radius) - sq(radius / 2)) * 2\n\tlet nx = ceil(width / xStep)\n\n\ttranslate((width - nx * xStep) / 2 + xStep / 2, yStep / 2)\n\n\tfor (let xi = 0; xi < nx; xi++) {\n\t\tfor (let yi = 0; yi <= steps; yi++) {\n\t\t\tpush()\n\t\t\thexPattern(\n\t\t\t\txi * xStep,\n\t\t\t\tyi * yStep,\n\t\t\t\tradius,\n\t\t\t\t(xi + yi) % 2 == 0 ? animLoop.progress : (animLoop.progress + 0.5) % 1\n\t\t\t)\n\t\t\tpop()\n\t\t}\n\t}\n}\n\nfunction three() {\n\tlet steps = 5\n\tlet yStep = floor(height / steps)\n\tlet radius = yStep * 0.45\n\tlet xStep = yStep\n\tlet nx = floor(width / xStep)\n\n\ttranslate((width - nx * xStep) / 2 + xStep / 2, yStep / 2)\n\n\tfor (let xi = 0; xi < nx; xi++) {\n\t\tfor (let yi = 0; yi < steps; yi++) {\n\t\t\tpush()\n\t\t\tlet p = (animLoop.progress + (xi / nx) * 0.2) % 1\n\t\t\thexPattern(xi * xStep, yi * yStep, radius, p, 2)\n\t\t\tpop()\n\t\t}\n\t}\n}\n\nfunction four() {\n\thexPattern(250, 180, 150, animLoop.progress, 3)\n}\n\nfunction linesBack(start, end, ns, foreground = true, p, radius) {\n\tlet amt = 1 - cp(p, start, end)\n\tif (amt <= 0 || p < start) {\n\t\treturn\n\t}\n\n\tif (foreground) {\n\t\tstroke(colf.h, colf.s, colf.b)\n\t} else {\n\t\tstroke(colb.h, colb.s, colb.b)\n\t}\n\n\tns.forEach((n, i) => {\n\t\tpush()\n\t\trotate(points[n].heading())\n\t\tline(0, 0, radius * amt, 0)\n\t\tpop()\n\t})\n}\n\nfunction linesOut(start, end, stayUntil, ns, foreground = true, p, radius) {\n\tif (p < start || p > stayUntil) return\n\tlet int = (end - start) / 2\n\tforeground ? stroke(colf.h, colf.s, colf.b) : stroke(colb.h, colb.s, colb.b)\n\tns.forEach((n, i) => {\n\t\tlet amt = cp(p, start + int * i, start + int * (i + 1))\n\t\tpush()\n\t\trotate(points[n].heading())\n\t\tline(0, 0, radius * amt, 0)\n\t\tpop()\n\t})\n}\n\n//outer lines\nfunction outerLines(start, end, stayUntil, p, radius) {\n\tif (p > stayUntil) return\n\tstroke(colf.h, colf.s, colf.b)\n\tlet int = (end - start) / 6\n\n\tpoints.forEach((point, i) => {\n\t\tif (p < start + int * i) return\n\t\tpush()\n\t\ttranslate(point.x, point.y)\n\t\trotate(angleSize * -2 + angleSize * i)\n\t\tline(0, 0, radius * cp(p, start + int * i, start + int * (i + 1)), 0)\n\t\tpop()\n\t})\n}\n\nfunction embiggen(start, end, startSize, endSize, p) {\n\tif (p < start) return\n\tlet amt = cp(p, start, end)\n\tstroke(colf.h, colf.s, colf.b, 1 - amt)\n\n\tamt = map(amt, 0, 1, startSize, endSize)\n\n\tbeginShape()\n\tlet f = points[0].copy().setMag(amt)\n\tvertex(f.x, f.y)\n\tfor (let i = 1; i < points.length; i++) {\n\t\tlet newPoint = points[i].copy().setMag(amt)\n\t\tvertex(newPoint.x, newPoint.y)\n\t}\n\tvertex(f.x, f.y)\n\tendShape()\n}\n\nfunction fadeSquare(start, end, p, side = 'left', alphaS = 0, alphaE = 0.5) {\n\tif (p < start) return\n\tlet amt = cp(p, start, end)\n\tamt = map(amt, 0, 1, alphaS, alphaE)\n\tpush()\n\tfill(cols.h, cols.s, cols.b, amt)\n\tnoStroke()\n\n\tbeginShape()\n\tvertex(0, 0)\n\tvertex(points[1].x, points[1].y)\n\tif (side == 'left') {\n\t\tvertex(points[2].x, points[2].y)\n\t\tvertex(points[3].x, points[3].y)\n\t} else {\n\t\tvertex(points[0].x, points[0].y)\n\t\tvertex(points[5].x, points[5].y)\n\t}\n\tvertex(0, 0)\n\tendShape()\n\n\tpop()\n}\n\nfunction hexPattern(x, y, radius = 100, p, pattern = 1) {\n\tpoints.forEach((point) => {\n\t\tpoint.setMag(radius)\n\t})\n\ttranslate(x, y)\n\n\tfunction pattern1() {\n\t\trotate(angleSize / 2)\n\t\tstrokeWeight(3)\n\t\tnoFill()\n\t\tlinesOut(0.15, 0.25, 0.75, [0, 2, 4], false, p, radius)\n\t\tlinesBack(0.75, 0.8, [0, 2, 4], false, p, radius)\n\n\t\t// fadeSquare(0.3, 0.35, p, 'left')\n\t\t// fadeSquare(0.35, 0.5, p, 'right')\n\t\tlinesOut(0.25, 0.35, 0.8, [1, 3, 5], true, p, radius)\n\t\tlinesBack(0.8, 0.85, [1, 3, 5], true, p, radius)\n\n\t\touterLines(0, 0.3, 0.7, p, radius)\n\n\t\tembiggen(0.7, 0.8, radius, radius * 1.5, p)\n\t}\n\n\tfunction pattern2() {\n\t\trotate(angleSize / 2)\n\t\tstrokeWeight(2)\n\t\tnoFill()\n\n\t\tlinesOut(0.2, 0.45, 0.6, [0, 2, 4], false, p, radius)\n\t\tlinesBack(0.6, 0.8, [0, 2, 4], false, p, radius)\n\t\tlinesOut(0.25, 0.5, 0.7, [1, 3, 5], true, p, radius)\n\t\tlinesBack(0.7, 0.9, [1, 3, 5], true, p, radius)\n\n\t\touterLines(0, 0.5, 0.7, p, radius)\n\t\tembiggen(0.7, 1, radius, radius * 1.5, p)\n\t}\n\n\tfunction pattern3() {\n\t\trotate(angleSize / 2)\n\t\tstrokeWeight(3)\n\t\tnoFill()\n\n\t\tlinesOut(0.15, 0.25, 0.75, [0, 2, 4], false, p, radius)\n\t\tlinesBack(0.75, 0.8, [0, 2, 4], false, p, radius)\n\t\tfadeSquare(0.3, 0.35, p, 'left')\n\t\tfadeSquare(0.35, 0.5, p, 'right')\n\t\tlinesOut(0.25, 0.35, 0.8, [1, 3, 5], true, p, radius)\n\t\tlinesBack(0.8, 0.85, [1, 3, 5], true, p, radius)\n\n\t\touterLines(0, 0.3, 1, p, radius)\n\t\t// embiggen(0.7, 0.8, radius, radius * 1.5, p)\n\t}\n\n\tif (pattern == 1) {\n\t\tpattern1()\n\t} else if (pattern == 2) {\n\t\tpattern2()\n\t} else if (pattern == 3) {\n\t\tpattern3()\n\t}\n}\n\nfunction getPoints() {\n\tlet angle = 0\n\tlet i = 0\n\twhile (i < 6) {\n\t\tlet curX = cos(angle)\n\t\tlet curY = sin(angle)\n\t\tpoints.push(createVector(curX, curY))\n\t\tangle += angleSize\n\t\ti++\n\t}\n}\n\nfunction cp(p, start, end) {\n\treturn map(constrain(p, start, end), start, end, 0, 1)\n}\n\nfunction easeInOutSine(x) {\n\treturn -(cos(Math.PI * x) - 1) / 2\n}\n\nwindow.setup = setup\nwindow.draw = draw\n"],"names":["$9d4ddc0f3fd79b9b$var$angleSize","$9d4ddc0f3fd79b9b$var$points","$9d4ddc0f3fd79b9b$var$colf","h","s","b","$9d4ddc0f3fd79b9b$var$colb","$9d4ddc0f3fd79b9b$var$cols","$9d4ddc0f3fd79b9b$var$linesBack","start","end","ns","foreground","p","radius","amt","$9d4ddc0f3fd79b9b$var$cp","stroke","forEach","n","i","push","rotate","heading","line","pop","$9d4ddc0f3fd79b9b$var$linesOut","stayUntil","int","$9d4ddc0f3fd79b9b$var$outerLines","point","translate","x","y","$9d4ddc0f3fd79b9b$var$embiggen","startSize","endSize","map","beginShape","f","copy","setMag","vertex","length","newPoint","endShape","$9d4ddc0f3fd79b9b$var$fadeSquare","side","alphaS","alphaE","fill","noStroke","$9d4ddc0f3fd79b9b$var$hexPattern","pattern","strokeWeight","noFill","constrain","window","setup","createCanvas","angleMode","RADIANS","colorMode","HSB","TWO_PI","angle","curX","cos","curY","sin","createVector","$9d4ddc0f3fd79b9b$var$getPoints","createLoop","duration","draw","background","animLoop","progress"],"version":3,"file":"12-loopsquares.js.map"}